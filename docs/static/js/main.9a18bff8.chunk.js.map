{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mathJaxConfig","loader","load","tex","packages","[+]","getRandomInt","min","max","Math","floor","random","App","problems","setProblems","useState","problemCount","setProblemCount","divisorDigits","setDivisorDigits","dividendDigits","setDividendDigits","remainderOption","setRemainderOption","mathFontSize","setMathFontSize","problemSpacing","setProblemSpacing","useEffect","savedSettings","Cookies","get","parsed","JSON","parse","err","console","error","saveSettingsToCookie","settings","set","stringify","expires","React","createElement","MathJaxContext","version","config","className","type","value","onChange","e","Number","target","onBlur","onClick","generateProblems","newProblems","i","dividendMin","dividendMax","divisor","dividend","remainder","isExact","hasRemainder","ok","push","map","prob","index","latex","String","raw","key","style","minHeight","MathJax","dynamic","fontSize","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9a18bff8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { MathJax, MathJaxContext } from \"better-react-mathjax\";\nimport Cookies from \"js-cookie\";\nimport \"./App.css\";\n\nconst mathJaxConfig = {\n  loader: { load: [\"[tex]/enclose\"] },\n  tex: {\n    packages: { \"[+]\": [\"enclose\"] },\n  },\n};\n\nfunction App() {\n  const [problems, setProblems] = useState([]);\n\n  const [problemCount, setProblemCount] = useState(9);\n  const [divisorDigits, setDivisorDigits] = useState(1);\n  const [dividendDigits, setDividendDigits] = useState(3);\n  const [remainderOption, setRemainderOption] = useState(\"mixed\");\n  const [mathFontSize, setMathFontSize] = useState(28);\n  const [problemSpacing, setProblemSpacing] = useState(140);\n\n  // ------------------------\n  // Loading settings from cookie\n  // ------------------------\n  useEffect(() => {\n    const savedSettings = Cookies.get(\"divisionSettings\");\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings);\n        if (parsed.problemCount) setProblemCount(parsed.problemCount);\n        if (parsed.divisorDigits) setDivisorDigits(parsed.divisorDigits);\n        if (parsed.dividendDigits) setDividendDigits(parsed.dividendDigits);\n        if (parsed.remainderOption) setRemainderOption(parsed.remainderOption);\n        if (parsed.mathFontSize) setMathFontSize(parsed.mathFontSize);\n        if (parsed.problemSpacing) setProblemSpacing(parsed.problemSpacing);\n      } catch (err) {\n        console.error(\"Cookie parse error:\", err);\n      }\n    }\n  }, []);\n\n  const saveSettingsToCookie = () => {\n    const settings = {\n      problemCount,\n      divisorDigits,\n      dividendDigits,\n      remainderOption,\n      mathFontSize,\n      problemSpacing,\n    };\n    Cookies.set(\"divisionSettings\", JSON.stringify(settings), { expires: 365 });\n  };\n\n  const generateProblems = () => {\n    const newProblems = [];\n    for (let i = 0; i < problemCount; i++) {\n      while (true) {\n        const divisorMin = 10 ** (divisorDigits - 1);\n        const divisorMax = 10 ** divisorDigits - 1;\n        const dividendMin = 10 ** (dividendDigits - 1);\n        const dividendMax = 10 ** dividendDigits - 1;\n\n        const divisor = getRandomInt(divisorMin, divisorMax);\n        const dividend = getRandomInt(dividendMin, dividendMax);\n\n        const remainder = dividend % divisor;\n        const isExact = remainder === 0;\n        const hasRemainder = remainder !== 0;\n\n        let ok = false;\n        switch (remainderOption) {\n          case \"none\":\n            if (isExact) ok = true;\n            break;\n          case \"all\":\n            if (hasRemainder) ok = true;\n            break;\n          case \"mixed\":\n            ok = true;\n            break;\n          default:\n            ok = true;\n        }\n\n        if (ok && divisor !== 0) {\n          newProblems.push({ dividend, divisor });\n          break;\n        }\n      }\n    }\n    setProblems(newProblems);\n\n    saveSettingsToCookie();\n  };\n\n  return (\n    <MathJaxContext version={3} config={mathJaxConfig}>\n      <div className=\"container\">\n        <h1>わり算（筆算）問題ジェネレーター</h1>\n\n        <div className=\"controls\">\n          <label>\n            問題数:\n            <input\n              type=\"number\"\n              value={problemCount}\n              onChange={(e) => setProblemCount(Number(e.target.value))}\n              onBlur={saveSettingsToCookie}\n            />\n          </label>\n\n          <label>\n            割る数(除数)の桁数:\n            <input\n              type=\"number\"\n              value={divisorDigits}\n              onChange={(e) => setDivisorDigits(Number(e.target.value))}\n              onBlur={saveSettingsToCookie}\n            />\n          </label>\n\n          <label>\n            割られる数(被除数)の桁数:\n            <input\n              type=\"number\"\n              value={dividendDigits}\n              onChange={(e) => setDividendDigits(Number(e.target.value))}\n              onBlur={saveSettingsToCookie}\n            />\n          </label>\n\n          <label>\n            余りの種類:\n            <select\n              value={remainderOption}\n              onChange={(e) => {\n                setRemainderOption(e.target.value);\n                saveSettingsToCookie();\n              }}\n            >\n              <option value=\"none\">全部余りなし</option>\n              <option value=\"all\">全部余りあり</option>\n              <option value=\"mixed\">混合</option>\n            </select>\n          </label>\n\n          <label>\n            数式文字サイズ(px):\n            <input\n              type=\"number\"\n              value={mathFontSize}\n              onChange={(e) => setMathFontSize(Number(e.target.value))}\n              onBlur={saveSettingsToCookie}\n            />\n          </label>\n\n          <label>\n            上下余白(px):\n            <input\n              type=\"number\"\n              value={problemSpacing}\n              onChange={(e) => setProblemSpacing(Number(e.target.value))}\n              onBlur={saveSettingsToCookie}\n            />\n          </label>\n\n          <button onClick={generateProblems}>問題を生成</button>\n        </div>\n\n        <div className=\"problems-grid\">\n          {problems.map((prob, index) => {\n            const latex = String.raw`\\require{enclose}${prob.divisor} \\enclose{longdiv}{${prob.dividend}}`;\n\n            return (\n              <div\n                key={index}\n                className=\"problem-item\"\n                style={{ minHeight: problemSpacing + \"px\" }}\n              >\n                <MathJax dynamic style={{ fontSize: mathFontSize + \"px\" }}>\n                  {`\\\\(${latex}\\\\)`}\n                </MathJax>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </MathJaxContext>\n  );\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}